config:
  target: 'http://localhost'  # Это значение может быть не важно, если мы не тестируем приложение
  phases:
    - duration: 60  # Длительность фазы (60 секунд)
      arrivalRate: 10  # Количество запросов в секунду
  plugins:
    prometheus:
      port: 8001  # Экспорт метрик на порт 8001
      pushGatewayUrl: 'http://localhost:9092'  # Адрес Prometheus Push Gateway

scenarios:
  - flow:
      - function: "queryPostgres"  # Функция для выполнения запросов в PostgreSQL
      - function: "queryMongoDB"   # Функция для выполнения запросов в MongoDB

# Определение функций для запросов к БД
functions:
  queryPostgres:
    - log: "Executing query on PostgreSQL"
    - exec:
        code: |
          const { Client } = require('pg');
          module.exports = async function() {
            const client = new Client({
              user: 'postgres',
              host: 'postgresql_testing',  # Имя контейнера PostgreSQL в Docker
              database: 'public',
              password: 'postgres',
              port: 5444,
            });

            try {
              await client.connect();
              const res = await client.query('SELECT * FROM ratings;');
              console.log('Query result:', res.rows);
            } catch (err) {
              console.error('Error executing query', err.stack);
            } finally {
              await client.end();
            }
          };

  queryMongoDB:
    - log: "Executing query on MongoDB"
    - exec:
        code: |
          const { MongoClient } = require('mongodb');
          module.exports = async function() {
            const uri = 'mongodb://mongodb_testing:27027';  # Имя контейнера MongoDB в Docker
            try {
              const client = await MongoClient.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true });
              const db = client.db('ppo_db');
              const collection = db.collection('ratings');
              const docs = await collection.find({}).toArray();
              console.log('MongoDB query result:', docs);
              client.close();
            } catch (err) {
              console.error('Error connecting to MongoDB', err);
            }
          };
